// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DepositReceivedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("depositor", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("currentWeek", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DepositReceivedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DepositReceivedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DepositReceivedEntity", id.toString(), this);
    }
  }

  static load(id: string): DepositReceivedEntity | null {
    return changetype<DepositReceivedEntity | null>(
      store.get("DepositReceivedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value!.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currentWeek(): BigInt {
    let value = this.get("currentWeek");
    return value!.toBigInt();
  }

  set currentWeek(value: BigInt) {
    this.set("currentWeek", Value.fromBigInt(value));
  }
}

export class RewardsReceivedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewarder", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RewardsReceivedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RewardsReceivedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RewardsReceivedEntity", id.toString(), this);
    }
  }

  static load(id: string): RewardsReceivedEntity | null {
    return changetype<RewardsReceivedEntity | null>(
      store.get("RewardsReceivedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewarder(): Bytes {
    let value = this.get("rewarder");
    return value!.toBytes();
  }

  set rewarder(value: Bytes) {
    this.set("rewarder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class FundsWithdrawnEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("rewarder", Value.fromBytes(Bytes.empty()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("currentWeek", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundsWithdrawnEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FundsWithdrawnEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FundsWithdrawnEntity", id.toString(), this);
    }
  }

  static load(id: string): FundsWithdrawnEntity | null {
    return changetype<FundsWithdrawnEntity | null>(
      store.get("FundsWithdrawnEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewarder(): Bytes {
    let value = this.get("rewarder");
    return value!.toBytes();
  }

  set rewarder(value: Bytes) {
    this.set("rewarder", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get currentWeek(): BigInt {
    let value = this.get("currentWeek");
    return value!.toBigInt();
  }

  set currentWeek(value: BigInt) {
    this.set("currentWeek", Value.fromBigInt(value));
  }
}

export class OwnershipTransferredEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("previousOwner", Value.fromBytes(Bytes.empty()));
    this.set("newOwner", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save OwnershipTransferredEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save OwnershipTransferredEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("OwnershipTransferredEntity", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferredEntity | null {
    return changetype<OwnershipTransferredEntity | null>(
      store.get("OwnershipTransferredEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class WeekAdvancedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("newWeek", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WeekAdvancedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WeekAdvancedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WeekAdvancedEntity", id.toString(), this);
    }
  }

  static load(id: string): WeekAdvancedEntity | null {
    return changetype<WeekAdvancedEntity | null>(
      store.get("WeekAdvancedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newWeek(): BigInt {
    let value = this.get("newWeek");
    return value!.toBigInt();
  }

  set newWeek(value: BigInt) {
    this.set("newWeek", Value.fromBigInt(value));
  }
}

export class UniqueMaxUpdatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UniqueMaxUpdatedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UniqueMaxUpdatedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UniqueMaxUpdatedEntity", id.toString(), this);
    }
  }

  static load(id: string): UniqueMaxUpdatedEntity | null {
    return changetype<UniqueMaxUpdatedEntity | null>(
      store.get("UniqueMaxUpdatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newMax(): i32 {
    let value = this.get("newMax");
    return value!.toI32();
  }

  set newMax(value: i32) {
    this.set("newMax", Value.fromI32(value));
  }
}
